<!-- 
    METODOS DISEÑO
    Desarrollo: Jorge Núñez
    Apoyo: Eduardo Meza, Daniel Hernandez
    Fecha: Abril - Mayo 2018XX
-->
<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters1="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             xmlns:wpf1="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"                     
        x:Class="QPil.App"          
             StartupUri="Pages\SplashWindow.xaml"
             >

    <Application.Resources>

        <ResourceDictionary 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz" 
            >

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToolTip.xaml"  />
                <ResourceDictionary Source="pack://application:,,,/Dragablz;component/Themes/materialdesign.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!-- TIPOGRAFIA -->
            <Style TargetType="{x:Type Window}">
                <Setter Property="FontFamily" Value="Arial" />
            </Style>

            <!-- LABEL -->
            <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="FontFamily" Value="Arial"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Label}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.56"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#region COLORES - DEGRADADOS -->
            <LinearGradientBrush x:Key="AzulDegradadoNU4IT" EndPoint="0.5,1" StartPoint="0.5,0">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FF0F517C" Offset="0.011"/>
                        <GradientStop Color="#FF09283E" Offset="1"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#CCC" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#CCC" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#AAA" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#BBB" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="0.1"/>
                        <GradientStop Color="#EEE" Offset="0.9"/>
                        <GradientStop Color="#FFF" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#CCC" Offset="0.0"/>
                        <GradientStop Color="#444" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#CCC" Offset="0.0"/>
                        <GradientStop Color="#444" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#777" Offset="0.0"/>
                        <GradientStop Color="#000" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#444" Offset="0.0"/>
                        <GradientStop Color="#888" Offset="1.0"/>
                    </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>

            <!--#region COLORES - NUBOT -->
            <Color x:Key="Principal">#FF2471A3</Color>
            <Color x:Key="Secundario">#FF37474f</Color>
            <Color x:Key="Tercero">#FFF6F6F6</Color>
            <Color x:Key="Papel">#FFF6F6F6</Color>
            <SolidColorBrush x:Key="VerdePistache" Color="#FFBDF0D1"/>
            <SolidColorBrush x:Key="MoradoClaro"   Color="#FFBDA0D1"/>
            <SolidColorBrush x:Key="AzulBoton"     Color="#FF2773a4"/>
            <SolidColorBrush x:Key="AzulClaro"     Color="#FF009DE6"/>
            <SolidColorBrush x:Key="AzulOscuro2"   Color="#FF003A61"/>
            <SolidColorBrush x:Key="RojoBoton"     Color="#FFBF0808"/>
            <SolidColorBrush x:Key="RojoOscuro2"   Color="#FF96002B"/>
            <SolidColorBrush x:Key="AzulLogin"     Color="#FF154EB0"/>
            <SolidColorBrush x:Key="AzulLoginOsc"  Color="#FF1C4791"/>
            <SolidColorBrush x:Key="Naranja"       Color="#FFE04A32"/>
            <SolidColorBrush x:Key="GrisLetra"     Color="#FFCDCDCD"/>
            <SolidColorBrush x:Key="GrisClaro"     Color="#FFCDD8E2"/>
            <SolidColorBrush x:Key="GrisOsc"       Color="#FF9EC1E0"/>
            <SolidColorBrush x:Key="Verde2"        Color="#FF339966"/>
            <SolidColorBrush x:Key="Verde3"        Color="#FF00C71B"/>
            <SolidColorBrush x:Key="Naranja2"      Color="#FFF99300"/>
            <SolidColorBrush x:Key="Rojo"          Color="#FFE00A0A"/>
            <SolidColorBrush x:Key="GrisAcento"    Color="#FFB0BEC5"/>
            <SolidColorBrush x:Key="AzulVerdeNU"   Color="#FF0097A7"/>
            <SolidColorBrush x:Key="Azul Pizarra"  Color="#FF0A8990"/>
            <SolidColorBrush x:Key="GrisPrincipal" Color="{StaticResource Tercero}" x:Uid="#FF82A8C1"/>
            <SolidColorBrush x:Key="AzulOscuro"  Color="{StaticResource Secundario}" x:Uid="#FF194968"/>
            <SolidColorBrush x:Key="AzulNU" Color="{StaticResource Principal}" x:Uid="#FF2471A3"/>

            <!--#region COLORES -ART-->
            <SolidColorBrush x:Key="VerdeClaro_WM" Color="#FF40AE54" />
            <SolidColorBrush x:Key="VerdeOscuro_WM" Color="#FF129329" />
            <SolidColorBrush x:Key="GrisOxford" Color="#FF3F3F46" />
            <SolidColorBrush x:Key="Azul Oscuro WM" Color="#FF003896"/>
            <SolidColorBrush x:Key="Azul Medio WM" Color="#FF1A75CF"/>
            <SolidColorBrush x:Key="Azul Claro WM" Color="#FF71CEF1"/>
            <SolidColorBrush x:Key="Amarillo WM" Color="#FFFDBB30"/>

            <!--#region COLORES - BLANCOS Y TRANSPARENTES -->
            <SolidColorBrush x:Key="MaterialDesignBodyLight" Color="{StaticResource Papel}"/>
            <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="Black"/>
            <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="Black"/>
            <SolidColorBrush x:Key="MaterialDesignTextFieldBoxBackground" Color="#1AFFFFFF"/>
            <SolidColorBrush x:Key="MaterialDesignTextFieldBoxDisabledBackground" Color="#0DFFFFFF"/>
            <SolidColorBrush x:Key="MaterialDesignTextAreaBorder" Color="#BCFFFFFF"  />
            <SolidColorBrush x:Key="MaterialDesignTextAreaInactiveBorder" Color="#1AFFFFFF"  />
            <SolidColorBrush x:Key="MaterialDesignFlatButtonClick" Color="#19757575"  />
            <SolidColorBrush x:Key="MaterialDesignSnackbarBackground" Color="#FFCDCDCD"  />
            <SolidColorBrush x:Key="MaterialDesignSnackbarMouseOver" Color="#FFB9B9BD"  />
            <SolidColorBrush x:Key="MaterialDesignFlatButtonRipple" Color="#FFB6B6B6"  />

            <!--#region COLORES - OSCUROS -->
            <SolidColorBrush x:Key="MaterialDesignBackground" Color="Orange"  />
            <SolidColorBrush x:Key="MaterialDesignCardBackground" Color="Red"  />
            <SolidColorBrush x:Key="MaterialDesignToolBarBackground" Color="LightGray"  />
            <SolidColorBrush x:Key="MaterialDesignCheckBoxDisabled" Color="Green"  />
            <SolidColorBrush x:Key="MaterialDesignChipBackground" Color="Purple"  />
            <SolidColorBrush x:Key="MaterialDesignSnackbarRipple" Color="Pink"  />

            <!--#region COLORES - PRINCIPALES -->
            <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{StaticResource Principal}"/>
            <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{StaticResource Secundario}" />
            <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="{StaticResource Tercero}"/>
            <SolidColorBrush x:Key="MaterialDesignColumnHeader" Color="White" x:Uid="Titulos de Datagrid"/>
            <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="White" x:Uid="Titulos"/>
            <SolidColorBrush x:Key="MaterialDesignBody" Color="Black" x:Uid="Letra"/>
            <SolidColorBrush x:Key="MaterialDesignToolTipBackground" Color="Black" x:Uid="Tooltip"/>
            <SolidColorBrush x:Key="MaterialDesignCheckBoxOff" Color="#FFC6DAE7" x:Uid="Fondo elementos"/>
            <SolidColorBrush x:Key="MaterialDesignPaper" Color="WhiteSmoke" x:Uid="Fondo Elementos"/>
            <SolidColorBrush x:Key="MaterialDesignDivider" Color="{StaticResource Principal}" Opacity=".2" x:Uid="Divisor"/>
            <SolidColorBrush x:Key="MaterialDesignSelection" Color="{StaticResource Tercero}" Opacity=".2"  x:Uid="ScrollBar"/>
            <SolidColorBrush x:Key="MaterialDesignTextBoxBorder" Color="{StaticResource Principal}" Opacity="1" x:Uid="Borde de elementos" />
            <SolidColorBrush x:Key="MDsubmenu" Color="{StaticResource Principal}" Opacity=".8" x:Uid="Borde de elementos" />

            <!--#region COLORES - OTROS -->
            <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
            <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
            <SolidColorBrush x:Key="WindowBackgroundBrush"   Color="#FFF" />
            <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />
            <SolidColorBrush x:Key="DisabledBorderBrush"     Color="#AAA" />
            <SolidColorBrush x:Key="SolidBorderBrush"        Color="#888" />
            <SolidColorBrush x:Key="LightBorderBrush"        Color="#AAA" />
            <SolidColorBrush x:Key="GlyphBrush"              Color="#444" />
            <SolidColorBrush x:Key="LightColorBrush"         Color="#DDD" />
            <SolidColorBrush x:Key="ValidationErrorBrush"    Color="#F44336"/>

            <!--EXPANDER -->
            <ControlTemplate x:Key="ExpColor21" TargetType="{x:Type Expander}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition x:Name="ContentRow" Height="0"/>
                    </Grid.RowDefinitions>
                    <Border x:Name="Border" Grid.Row="0" BorderThickness="1" CornerRadius="5,0,0,0" BorderBrush="{TemplateBinding BorderBrush}" >
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFF" Offset="0.0"/>
                                        <GradientStop Color="#EEE" Offset="1.0"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="958" />
                            </Grid.ColumnDefinitions>
                            <!--<ToggleButton Template="{StaticResource ExpToogBut}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                      OverridesDefaultStyle="True" Background="{TemplateBinding BorderBrush}" BorderBrush="{TemplateBinding Background}" Grid.ColumnSpan="1" Margin="0,0,934,0"/>-->
                            <ContentPresenter Grid.Column="0" Margin="24,4,4,4" ContentSource="Header" RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <Border x:Name="Content" Grid.Row="1" Background="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding OpacityMask}" BorderThickness="1,0,1,1" CornerRadius="0,0,2,2" >
                        <ContentPresenter Margin="4" />
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="True">
                        <Setter TargetName="ContentRow" Property="Height" Value="{Binding DesiredHeight, ElementName=Content}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--EXPANDER - Tipo SAP (Style)-->
            <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
                <Border
    x:Name="Border" 
    CornerRadius="2,0,0,0"
    Background="Transparent"
    BorderBrush="{StaticResource NormalBorderBrush}"
    BorderThickness="0,0,1,0">
                    <Path 
      x:Name="Arrow"
      Fill="{StaticResource GlyphBrush}"
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      Data="M 0 0 L 4 4 L 8 0 Z"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter TargetName="Border" Property="Background"
              Value="{StaticResource DarkBrush}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter TargetName="Border" Property="Background"
              Value="{StaticResource PressedBrush}" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="Arrow" Property="Data"
              Value="M 0 4 L 4 0 L 8 4 Z" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background"
              Value="{StaticResource DisabledBackgroundBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush"
              Value="{StaticResource DisabledBorderBrush}" />
                        <Setter Property="Foreground"
              Value="{StaticResource DisabledForegroundBrush}"/>
                        <Setter TargetName="Arrow" Property="Fill"
              Value="{StaticResource DisabledForegroundBrush}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="SAP" TargetType="{x:Type Expander}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition x:Name="ContentRow" Height="0"/>
                                </Grid.RowDefinitions>
                                <Border 
            x:Name="Border" 
            Grid.Row="0" 
            Background="{StaticResource LightBrush}"
            BorderBrush="{StaticResource NormalBorderBrush}"
            BorderThickness="1" 
            CornerRadius="2,2,0,0" >
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton
                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                OverridesDefaultStyle="True" 
                Template="{StaticResource ExpanderToggleButton}" 
                Background="{StaticResource NormalBrush}" />
                                        <ContentPresenter 
                Grid.Column="1"
                Margin="4" 
                ContentSource="Header" 
                RecognizesAccessKey="True" />
                                    </Grid>
                                </Border>
                                <Border 
            x:Name="Content" 
            Grid.Row="1" 
            Background="{StaticResource WindowBackgroundBrush}"
            BorderBrush="{StaticResource SolidBorderBrush}" 
            BorderThickness="1,0,1,1" 
            CornerRadius="0,0,2,2" >
                                    <ContentPresenter Margin="4" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="ContentRow" Property="Height"
                    Value="{Binding DesiredHeight, ElementName=Content}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Background"
                    Value="{StaticResource DisabledBackgroundBrush}" />
                                    <Setter TargetName="Border" Property="BorderBrush"
                    Value="{StaticResource DisabledBorderBrush}" />
                                    <Setter Property="Foreground"
                    Value="{StaticResource DisabledForegroundBrush}"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--Stretch Out Content Expander's Template, Uses: AnimatedExpanderButtonTemp from above-->
            <ControlTemplate x:Key="StretchyExpanderTemp_RIGHT" TargetType="{x:Type Expander}">
                <DockPanel>
                    <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0"/>
                    <ContentPresenter x:Name="ExpanderContent"
                                  ContentSource="Content"
                                  DockPanel.Dock="Bottom"
                                  >
                        <ContentPresenter.LayoutTransform>
                            <ScaleTransform ScaleY="0"/>
                        </ContentPresenter.LayoutTransform>
                    </ContentPresenter>
                </DockPanel>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>

                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--Animated Expander Button's Template-->
            <ControlTemplate x:Key="AnimatedExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
                <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2"/>
                        <Ellipse x:Name="Circle"
                         Grid.Column="0"
                         Stroke="DarkGray"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                        <Path x:Name="Arrow"
                      Grid.Column="0"
                      Data="M 1,1.5 L 4.5,5 8,1.5"
                      Stroke="#FF666666"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      >
                            <Path.RenderTransform>
                                <RotateTransform Angle="0"/>
                            </Path.RenderTransform>
                        </Path>
                        <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>

                    <!--Animate arrow when toggled-->

                    <Trigger Property="IsChecked"
                         Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>


                    <!--MouseOver, Pressed behaviours-->

                    <Trigger Property="IsMouseOver"
                                 Value="true">
                        <Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Circle"/>
                        <Setter Property="Stroke"
                                    Value="#222"
                                    TargetName="Arrow"/>
                    </Trigger>
                    <Trigger Property="IsPressed"
                                 Value="true">
                        <Setter Property="Stroke"
                                    Value="#FF526C7B"
                                    TargetName="Circle"/>
                        <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="Circle"/>
                        <Setter Property="Stroke"
                                    Value="#FF003366"
                                    TargetName="Arrow"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- PLACE HOLDER -->
            <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Grid>
                                <TextBox Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" 
                                 x:Name="textSource" 
                                 Background="Transparent" 
                                 Panel.ZIndex="2" />
                                <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Foreground" Value="Transparent"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Text, Source={x:Reference textSource}}" Value="">
                                                    <Setter Property="Foreground" Value="LightGray"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--EXAPNDER SIN BOTON-->
            <ControlTemplate x:Key="ExpanderWithoutButton" TargetType="{x:Type Expander}">
                <Border BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="{TemplateBinding BorderThickness}"
          Background="{TemplateBinding Background}"
          CornerRadius="3"
          SnapsToDevicePixels="true">
                    <DockPanel>
                        <ContentPresenter
        Content="{TemplateBinding Header}"
        ContentTemplate="{TemplateBinding HeaderTemplate}"
        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
        DockPanel.Dock="Top"
        Margin="1"
        Focusable="True" />
                        <ContentPresenter
        x:Name="ExpandSite"
        Visibility="Collapsed"
        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
        Margin="{TemplateBinding Padding}"
        Focusable="True" />
                    </DockPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="true">
                        <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--DATAGRID - ALINEACION DEL TEXTO = CENTER-->
            <Style x:Key="DataGridCellCentered" TargetType="{x:Type DataGridCell}">
                <Setter Property="TextBlock.TextAlignment" Value="Center" />
            </Style>

            <!-- RADIOBUTTON -->
            <Style x:Key="RadioButon_WPF" TargetType="{x:Type RadioButton}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                                <BulletDecorator.Bullet>
                                    <Border x:Name="ForegroundPanel" Width="11" Height="11" CornerRadius="8">
                                        <Canvas>
                                            <Border Background="White" x:Name="CheckFlag" CornerRadius="10" VerticalAlignment="Center" HorizontalAlignment="Center" Width="11" Height="11">
                                                <Border.Effect>
                                                    <DropShadowEffect ShadowDepth="0" Direction="0" Opacity="0.5" />
                                                </Border.Effect>
                                                <Rectangle x:Name="rdbSeleccionado" Fill="{x:Null}" Width="7" Height="7" RadiusX="10" RadiusY="10" />
                                            </Border>
                                        </Canvas>
                                    </Border>
                                </BulletDecorator.Bullet>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            </BulletDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="Padding" Value="4,0,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="rdbSeleccionado" Property="Fill" Value="#FF085180" />
                                    <Setter TargetName="rdbSeleccionado" Property="Width" Value="9" />
                                    <Setter TargetName="rdbSeleccionado" Property="Height" Value="9" />
                                    <Setter TargetName="CheckFlag" Property="Background" Value="White" />
                                    <Setter TargetName="CheckFlag" Property="Width" Value="11" />
                                    <Setter TargetName="CheckFlag" Property="Height" Value="11" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="rdbSeleccionado" Property="Fill" Value="#FFCDCDCD" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TOOGLEBUTTON PARA COMBOBOX -->
            <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
                <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            </ControlTemplate>

            <ControlTemplate x:Key="ComboBoxToggleButtonROJO" TargetType="{x:Type ToggleButton}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="#FFC51212"
                  BorderBrush="#FFC51212"
                  BorderThickness="2,1,1,1" />
                    <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  BorderBrush="{x:Null}"
                  BorderThickness="0,0,1,0" >
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFEEEEEE" Offset="0"/>
                                <GradientStop Color="White" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                    <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
                </Grid>

                <!--Animaciones-->

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="#FF00487C" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                        <Setter Property="Foreground" Value="#888888"/>
                        <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--ESTILO DE COMBOBOX - COMBOBOX COLOR ROJO-->
            <Style x:Key="cmbBordeROJO" TargetType="{x:Type ComboBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="MinWidth" Value="80"/>
                <Setter Property="MinHeight" Value="20"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid>
                                <ToggleButton 
                                x:Name="ToggleButton" 
                                Template="{StaticResource ComboBoxToggleButtonROJO}" 
                                Grid.Column="2" 
                                Focusable="false"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press"/>
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="3,3,23,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                                <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}" 
                                Template="{StaticResource ComboBoxTextBox}" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Center" 
                                Margin="3,3,23,3"
                                Focusable="True" 
                                Background="White"
                                Foreground="#FF091144"
                                Visibility="Hidden"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                                <Popup
                                x:Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                                    <Grid x:Name="DropDown"
                                        SnapsToDevicePixels="True"                
                                        MinWidth="{TemplateBinding ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border 
                                            x:Name="DropDownBorder"
                                            Background="White"
                                            BorderThickness="1"
                                            BorderBrush="#FF085180"/>
                                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>

                            <!--Animaciones-->

                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="Gray"/>
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEditable"  Value="true">
                                    <Setter Property="IsTabStop" Value="false"/>
                                    <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ESTILO DE BOTONES . NORMAL FF37B554-->
            <Style x:Key="BotonNormal" TargetType="{x:Type Button}">
                <Setter Property="BorderBrush" Value="#FF024270" />
                <Setter Property="Foreground" Value="#FF024270" />
                <Setter Property="FontSize" Value="11" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="Gainsboro" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="White"/>

                        <Setter Property="Height" Value="50"/>
                        <Setter Property="Width" Value="200"/>

                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="White" Offset="1"/>
                                    <GradientStop Color="Gainsboro"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ESTILO DE BOTONES . RECTANGULO-->
            <Style x:Key="BotonJM21" TargetType="{x:Type Rectangle}">
                <Setter Property="StrokeThickness" Value="3" />
                <Setter Property="Stroke" Value="#FF1469A0" />
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFDADADA" Offset="1"/>
                            <GradientStop Color="White"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Fill" Value="Purple"/>
                        <Setter Property="Height" Value="50"/>
                        <Setter Property="Width" Value="200"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Fill">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF00487C" Offset="0.993"/>
                                    <GradientStop Color="#FF092A42"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ESTILO DE BOTONES . BORDE-->
            <Style x:Key="BotonBorde" TargetType="{x:Type Border}">
                <Setter Property="BorderThickness" Value="3" />
                <Setter Property="BorderBrush" Value="#FF1469A0" />
                <Setter Property="CornerRadius" Value="5" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Gainsboro" Offset="1"/>
                            <GradientStop Color="White"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="Purple"/>
                        <Setter Property="Height" Value="50"/>
                        <Setter Property="Width" Value="200"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="Gainsboro"/>
                                    <GradientStop Color="White" Offset="1"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="BorderBrush" Value="#FFC7C7C7" />
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="White"/>
                                    <GradientStop Color="#FFBBBBBB" Offset="1"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ESTILO DE BOTONES . BORDE AZUL-->
            <Style x:Key="BotonBordeAZUL" TargetType="{x:Type Border}">
                <Setter Property="BorderThickness" Value="3" />
                <Setter Property="BorderBrush" Value="#FF092A42" />
                <Setter Property="CornerRadius" Value="1" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF00487C" Offset="0.007"/>
                            <GradientStop Color="#FF092A42" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="Purple"/>
                        <Setter Property="Height" Value="50"/>
                        <Setter Property="Width" Value="200"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF00487C" Offset="0.993"/>
                                    <GradientStop Color="#FF092A42"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ESTILO DE BOTONES . GRID-->
            <Style x:Key="BotonGrid" TargetType="{x:Type Grid}">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Gainsboro" Offset="1"/>
                            <GradientStop Color="White"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="Purple"/>
                        <Setter Property="Height" Value="50"/>
                        <Setter Property="Width" Value="200"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="Gainsboro"/>
                                    <GradientStop Color="White" Offset="1"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ESTILO DE BOTONES . MENU LATERAL-->
            <Style x:Key="BotonMenu" TargetType="{x:Type Label}">
                <Setter Property="FontSize" Value="11px"/>
                <Setter Property="FontWeight" Value="Normal"/>
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF00487C" Offset="0.007"/>
                            <GradientStop Color="#FF092A42" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="Purple"/>
                        <Setter Property="Foreground" Value="DarkCyan"/>
                        <Setter Property="FontFamily" Value="Franklin Gothic"/>
                        <Setter Property="FontSize" Value="10"/>
                        <Setter Property="FontWeight" Value="Normal"/>
                        <Setter Property="Height" Value="50"/>
                        <Setter Property="Width" Value="200"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF00487C" Offset="0.993"/>
                                    <GradientStop Color="#FF092A42"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF00487C" Offset="0.993"/>
                                    <GradientStop Color="#FF092A42"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- TOOLTIP -->
            <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" Value="LightGray" />
                <Setter Property="Padding" Value="8" />
                <Setter Property="Placement" Value="MousePoint" />
                <!--<Setter Property="CustomPopupPlacementCallback" Value="{x:Static wpf1:ToolTipAssist.CustomPopupPlacementCallback}" />-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Border Background="{TemplateBinding Background}" CornerRadius="2" Margin="{TemplateBinding Margin}">
                                <ContentPresenter x:Name="ContentPresenter"  
                                          Margin="{TemplateBinding Padding}"
                                          Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#region ICONOS -->
            <wpf1:PackIcon x:Key="Icon_CHECK" x:Shared="False" Kind="Check" Width="20" Height="20" FlowDirection="LeftToRight" Foreground="White"/>
            <wpf1:PackIcon x:Key="Icon_OFFCHECK" x:Shared="False" Kind="Close" Width="20" Height="20" FlowDirection="LeftToRight" Foreground="White"/>

            <!--#region ESTILO DE SCROLLVIWER - GRIS/AZUL-->
            <Style x:Key="ScrollBarPageButton"
               TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels"
                    Value="True" />
                <Setter Property="OverridesDefaultStyle"
                    Value="true" />
                <Setter Property="IsTabStop"
                    Value="false" />
                <Setter Property="Focusable"
                    Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ScrollBarThumb"
               TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels"
                    Value="True" />
                <Setter Property="OverridesDefaultStyle"
                    Value="true" />
                <Setter Property="IsTabStop"
                    Value="false" />
                <Setter Property="Focusable"
                    Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border CornerRadius="6"
                                Background="#FFA1B7C5">
                                <Border.Style>
                                    <Style TargetType="{x:Type Border}">
                                        <Setter Property="Opacity"
                                            Value="0.7" />
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver"
                                                 Value="True">
                                                <Setter Property="Opacity"
                                                    Value="0.3" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding IsDragging, RelativeSource={RelativeSource AncestorType={x:Type Thumb}}}"
                                                     Value="True">
                                                <Setter Property="Opacity"
                                                    Value="0.3" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="VerticalScrollBar"
                         TargetType="{x:Type ScrollBar}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="0.00001*" />
                    </Grid.RowDefinitions>
                    <Border Grid.RowSpan="3"
                        CornerRadius="6"
                        Background="Gray"
                        Opacity="0.2" />
                    <Track x:Name="PART_Track"
                       Grid.Row="1"
                       IsDirectionReversed="true">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                      Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{StaticResource ScrollBarThumb}"
                               Margin="1,0,1,0"
                               Background="Transparent" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                      Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                </Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="HorizontalScrollBar"
                         TargetType="{x:Type ScrollBar}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MaxWidth="6" />
                        <ColumnDefinition Width="0.00001*" />
                        <ColumnDefinition MaxWidth="6" />
                    </Grid.ColumnDefinitions>
                    <Border Grid.ColumnSpan="3"
                        CornerRadius="6"
                        Background="#F0F0F0" />
                    <Track x:Name="PART_Track"
                       Grid.Column="1"
                       IsDirectionReversed="False">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                      Command="ScrollBar.PageLeftCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{StaticResource ScrollBarThumb}"
                               Margin="0,1,0,1"
                               Background="Transparent" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                      Command="ScrollBar.PageRightCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                </Grid>
            </ControlTemplate>

            <!-- SCROLLBAR -->
            <Style x:Key="{x:Type ScrollBar}"
               TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels"
                    Value="True" />
                <Setter Property="OverridesDefaultStyle"
                    Value="true" />
                <Style.Triggers>
                    <Trigger Property="Orientation"
                         Value="Horizontal">
                        <Setter Property="Width"
                            Value="Auto" />
                        <Setter Property="Height"
                            Value="12" />
                        <Setter Property="Template"
                            Value="{StaticResource HorizontalScrollBar}" />
                    </Trigger>
                    <Trigger Property="Orientation"
                         Value="Vertical">
                        <Setter Property="Width"
                            Value="12" />
                        <Setter Property="Height"
                            Value="Auto" />
                        <Setter Property="Margin"
                            Value="0,2,0,2" />
                        <Setter Property="Template"
                            Value="{StaticResource VerticalScrollBar}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- CUSTOMSCROLLVIEWER -->
            <Style x:Key="CustomScrollViewer"
               TargetType="{x:Type ScrollViewer}">
                <Setter Property="OverridesDefaultStyle"
                    Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollContentPresenter Grid.Column="0" />
                                <ScrollBar x:Name="PART_VerticalScrollBar"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Grid.Column="1" />
                                <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Orientation="Horizontal"
                                       Grid.Column="0"
                                       Value="{TemplateBinding HorizontalOffset}"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#region EXPANDER -->
            <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <!--<Setter Property="Foreground" Value="White"/>-->
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="ExpansionStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Expanded">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Visible</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Collapsed">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Collapsed</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Expanded">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Collapsed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Hidden</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <DockPanel Background="{TemplateBinding Background}">
                                    <ToggleButton x:Name="HeaderSite" BorderThickness="0" Cursor="Hand" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" DockPanel.Dock="Top" Foreground="White" Focusable="False" FontSize="14" IsTabStop="False" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Opacity="1">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Top"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="25" Width="25" Kind="MenuDown" Opacity="1" RenderTransformOrigin="0.5,0.5" >
                                                                                                    <!--ChevronDown-->
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <Border x:Name="ContentSite" CornerRadius="0 0 3 3" DockPanel.Dock="Bottom" Margin="0" Background="White" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 1 0 0" >
                                        <StackPanel x:Name="ContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <StackPanel.Height>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualHeight"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Height>
                                            <StackPanel.Width>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualWidth"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Width>
                                            <ContentPresenter x:Name="PART_Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"/>
                                        </StackPanel>
                                    </Border>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-180"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Down">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- NORMAL -->
            <Style TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="wpf1:RippleAssist.Feedback" Value="White"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="wpf1:ShadowAssist.ShadowDepth" Value="Depth1"/>
                <Setter Property="FontWeight" Value="Medium"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <!--<Setter Property="Padding" Value="16,4"/>-->
                <Setter Property="Height" Value="25"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <!-- CacheMode="{Binding (wpf1:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}" -->
                                <AdornerDecorator >
                                    <Grid>
                                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                                            <Border.Effect>
                                                <Binding Path="(wpf1:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <converters1:ShadowConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Border.Effect>
                                        </Border>
                                        <Border Background="{DynamicResource MaterialDesignBackground}" HorizontalAlignment="Center" Opacity="0.4">
                                            <Border.Width>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:RangeLengthConverter/>
                                                    </MultiBinding.Converter>
                                                    <Binding Path="(wpf1:ButtonProgressAssist.Minimum)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="(wpf1:ButtonProgressAssist.Maximum)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="(wpf1:ButtonProgressAssist.Value)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ButtonBase}}"/>
                                                </MultiBinding>
                                            </Border.Width>
                                        </Border>
                                    </Grid>
                                </AdornerDecorator>
                                <wpf1:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="wpf1:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                    <Setter Property="Opacity" Value="0.9"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="wpf1:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.23"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- ESTILO NORMAL WINDOWS -->
            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
            <Style x:Key="ButtonStyleW7" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- BOTON CIRCULAR -->
            <Style x:Key="ButtonCircular1" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="wpf1:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Style.BasedOn>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Width" Value="56"/>
                        <Setter Property="Height" Value="56"/>
                        <Style.BasedOn>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="FocusVisualStyle">
                                    <Setter.Value>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                <!--<Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>-->
                                <Setter Property="Foreground" Value="White"/>
                                <Setter Property="wpf1:RippleAssist.Feedback" Value="White"/>
                                <Setter Property="wpf1:ButtonProgressAssist.IndicatorForeground" Value="Red"/>
                                <Setter Property="wpf1:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource MaterialDesignDivider}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="wpf1:ShadowAssist.ShadowDepth" Value="Depth2"/>
                                <Setter Property="Padding" Value="1"/>
                                <Setter Property="Width" Value="40"/>
                                <Setter Property="Height" Value="40"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid>
                                                <AdornerDecorator>
                                                    <Ellipse x:Name="border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}">
                                                        <Ellipse.Effect>
                                                            <Binding Path="(wpf1:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                                <Binding.Converter>
                                                                    <converters1:ShadowConverter/>
                                                                </Binding.Converter>
                                                            </Binding>
                                                        </Ellipse.Effect>
                                                    </Ellipse>
                                                </AdornerDecorator>

                                                <!--#region ProgressBar x:Name="ProgressBar" Background="{Binding  -->

                                                <!--<ProgressBar x:Name="ProgressBar" Background="{Binding (wpf1:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (wpf1:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" IsIndeterminate="{Binding (wpf1:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (wpf1:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Margin="-8" Minimum="{Binding (wpf1:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Style="{DynamicResource MaterialDesignCircularProgressBar}" Value="{Binding (wpf1:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Stretch">
                                                    -->
                                                <!--<ProgressBar.Height>
                                                        <TemplateBinding Property="Height">
                                                            <TemplateBinding.ConverterParameter>
                                                                <system:Int32>8</system:Int32>
                                                            </TemplateBinding.ConverterParameter>
                                                            <TemplateBinding.Converter>
                                                                <converters1:MathConverter Operation="Add"/>
                                                            </TemplateBinding.Converter>
                                                        </TemplateBinding>
                                                    </ProgressBar.Height>
                                                    <ProgressBar.RenderTransform>         MaterialDesignCircularProgressBar
                                                        <TransformGroup>
                                                            <ScaleTransform ScaleY="0" ScaleX="0"/>
                                                        </TransformGroup>
                                                    </ProgressBar.RenderTransform>
                                                    <ProgressBar.Width>
                                                        <TemplateBinding Property="Width">
                                                            <TemplateBinding.ConverterParameter>
                                                                <system:Int32>8</system:Int32>
                                                            </TemplateBinding.ConverterParameter>
                                                            <TemplateBinding.Converter>
                                                                <converters1:MathConverter Operation="Add"/>
                                                            </TemplateBinding.Converter>
                                                        </TemplateBinding>
                                                    </ProgressBar.Width>-->
                                                <!--
                                                </ProgressBar>-->

                                                <!--#endregion-->

                                                <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                                                <wpf1:Ripple ClipToBounds="True" Clip="{Binding RenderedGeometry, ElementName=GeometryEllipse}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                <Ellipse x:Name="GeometryEllipse" Focusable="False" Fill="Transparent" IsHitTestVisible="False"/>

                                                <!--<wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Kind="PhoneVoip" Opacity="1" Height="{TemplateBinding Height}" Width="Auto"/>-->

                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsDefaulted" Value="True">
                                                    <Setter Property="Stroke" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Opacity" Value="0.23"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="wpf1:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                                </Trigger>
                                                <Trigger Property="IsKeyboardFocused" Value="True">
                                                    <Setter Property="wpf1:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                                </Trigger>
                                                <Trigger Property="wpf1:ButtonProgressAssist.IsIndicatorVisible" Value="True">
                                                    <Trigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.2" From="0.9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                                                <DoubleAnimation Duration="0:0:0.2" From="0.9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.EnterActions>
                                                    <Trigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="0.9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="0.9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.ExitActions>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Style.BasedOn>
                    </Style>
                </Style.BasedOn>
            </Style>

            <!-- CHECKBOX - EXCONDIDO-->
            <Style x:Key="CheckBoxStyle_HIDDEN" TargetType="{x:Type CheckBox}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="StoryboardIsChecked"/>
                                <Storyboard x:Key="StoryboardIsCheckedOff"/>
                            </ControlTemplate.Resources>
                            <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            </BulletDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard x:Name="BeginStoryboardCheckedTrue" Storyboard="{StaticResource StoryboardIsChecked}" />
                                        <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedFalse" />
                                    </Trigger.EnterActions>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard x:Name="BeginStoryboardCheckedFalse" Storyboard="{StaticResource StoryboardIsCheckedOff}" />
                                        <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedTrue" />
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- CHECKBOX - TIPO SLIDER IOS-->
            <Style x:Key="CheckBoxStyle_IOS" TargetType="{x:Type CheckBox}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="StoryboardIsChecked">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.10" Value="14"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="StoryboardIsCheckedOff">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="14"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.10" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                                <BulletDecorator.Bullet>
                                    <Border x:Name="ForegroundPanel" BorderThickness="1" Width="30" Height="17" CornerRadius="8">
                                        <Canvas>
                                            <Border Background="White" x:Name="CheckFlag" CornerRadius="10" VerticalAlignment="Center" BorderThickness="1" Width="15" Height="15" RenderTransformOrigin="0.5,0.5">
                                                <Border.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform/>
                                                        <SkewTransform/>
                                                        <RotateTransform/>
                                                        <TranslateTransform/>
                                                    </TransformGroup>
                                                </Border.RenderTransform>
                                                <Border.Effect>
                                                    <DropShadowEffect ShadowDepth="1" Direction="180" />
                                                </Border.Effect>
                                            </Border>
                                        </Canvas>
                                    </Border>
                                </BulletDecorator.Bullet>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            </BulletDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard x:Name="BeginStoryboardCheckedTrue" Storyboard="{StaticResource StoryboardIsChecked}" />
                                        <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedFalse" />
                                    </Trigger.EnterActions>
                                    <Setter TargetName="ForegroundPanel" Property="Background" Value="{StaticResource ResourceKey=PrimaryHueMidBrush}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard x:Name="BeginStoryboardCheckedFalse" Storyboard="{StaticResource StoryboardIsCheckedOff}" />
                                        <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedTrue" />
                                    </Trigger.EnterActions>
                                    <Setter TargetName="ForegroundPanel" Property="Background" Value="#FFCDCDCD" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- CHECKBOX - NORMAL -->
            <Style x:Key="CheckBoxStyle_Normal" TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Foreground" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}}"/>
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Click">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Viewbox FlowDirection="LeftToRight" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                    <Canvas Height="24" Width="24">
                                        <Path x:Name="Graphic" Data="M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3 M19,5L19,19 5,19 5,5 19,5z" Fill="{DynamicResource MaterialDesignCheckBoxOff}" Stretch="Fill"/>
                                        <Ellipse x:Name="InteractionEllipse" Fill="{TemplateBinding Foreground}" Height="0" IsHitTestVisible="False" Canvas.Left="12" Opacity="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="12" Width="0">
                                            <Ellipse.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="ButtonBase.Click">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <Trigger Property="HasContent" Value="True">
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Padding" Value="4,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                    <Setter Property="Opacity" Value="0.26"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True"/>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Data" TargetName="Graphic" Value="M10,17L5,12 6.41,10.58 10,14.17 17.59,6.58 19,8 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z"/>
                                    <Setter Property="Fill" TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Data" TargetName="Graphic" Value="M10,17L5,12 6.41,10.58 10,14.17 17.59,6.58 19,8 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z"/>
                                    <Setter Property="Opacity" TargetName="Graphic" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource ValidationErrorBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ValidationErrorBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#region RADIO BUTTON -->
            <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Click">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Viewbox Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                    <Canvas Height="24" Width="24">
                                        <Path x:Name="Graphic" Data="M12,20A8,8,0,0,1,4,12A8,8,0,0,1,12,4A8,8,0,0,1,20,12A8,8,0,0,1,12,20 M12,2A10,10,0,0,0,2,12A10,10,0,0,0,12,22A10,10,0,0,0,22,12A10,10,0,0,0,12,2z" Fill="{DynamicResource MaterialDesignCheckBoxOff}"/>
                                        <Ellipse x:Name="InteractionEllipse" Fill="{TemplateBinding Foreground}" Height="0" Canvas.Left="12" Opacity="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="12" Width="0">
                                            <Ellipse.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="ButtonBase.Click">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <Trigger Property="HasContent" Value="True">
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Padding" Value="4,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                    <Setter Property="Opacity" Value="0.26"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True"/>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Data" TargetName="Graphic" Value="M12,20A8,8,0,0,1,4,12A8,8,0,0,1,12,4A8,8,0,0,1,20,12A8,8,0,0,1,12,20 M12,2A10,10,0,0,0,2,12A10,10,0,0,0,12,22A10,10,0,0,0,22,12A10,10,0,0,0,12,2 M12,7A5,5,0,0,0,7,12A5,5,0,0,0,12,17A5,5,0,0,0,17,12A5,5,0,0,0,12,7z"/>
                                    <Setter Property="Fill" TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Data" TargetName="Graphic" Value="M12,20A8,8,0,0,1,4,12A8,8,0,0,1,12,4A8,8,0,0,1,20,12A8,8,0,0,1,12,20 M12,2A10,10,0,0,0,2,12A10,10,0,0,0,12,22A10,10,0,0,0,22,12A10,10,0,0,0,12,2 M12,7A5,5,0,0,0,7,12A5,5,0,0,0,12,17A5,5,0,0,0,17,12A5,5,0,0,0,12,7z"/>
                                    <Setter Property="Opacity" TargetName="Graphic" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource ValidationErrorBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ValidationErrorBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#region GROUPBOX -->
            <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
                <!--<Setter Property="Background" Value="White"/>  {TemplateBinding Background}-->
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="OpacityMask" Value="White"/>
                <!--<Setter Property="Padding" Value="1"/>-->
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <!--<Setter Property="SnapsToDevicePixels" Value="True"/> Effect="{DynamicResource MaterialDesignShadowDepth1}"
                <Setter Property="wpf1:ShadowAssist.ShadowDepth" Value="Depth0"/>
                <Setter Property="wpf1:ColorZoneAssist.Mode" Value="PrimaryMid"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Margin="0,19,0,0" CornerRadius="3" Background="{TemplateBinding OpacityMask}">
                                    <ContentPresenter Margin="3,16,3,3" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"/>
                                </Border>
                                <Border HorizontalAlignment="Left" Margin="12,0,0,0" >

                                    <Border x:Name="PART_ColorZone" CornerRadius="3"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" DockPanel.Dock="Top" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                        <ContentPresenter  Margin="3" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- COMBOBOX - BOTON TOOGLE A-->
            <ControlTemplate x:Key="ComboBoxToggleButton_JN" TargetType="{x:Type ToggleButton}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Background="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  CornerRadius="1"
                  />

                    <Border 
                  Grid.Column="0"
                  Margin="0" 
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Background="White"
                  BorderThickness="0,0,0,1"
                  CornerRadius="1"
                            >
                        <!--<Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFEEEEEE" Offset="0"/>
                                <GradientStop Color="White" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>-->
                    </Border>

                    <wpf1:PackIcon x:Name="ExpandPath" Kind="MenuDown" Opacity="1" Height="{TemplateBinding Height}" Grid.Column="1" Foreground="White"  HorizontalAlignment="Center" VerticalAlignment="Center"/>

                    <!--<Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4, 6 L8,2 L8,0 L4,4 z"
                />-->
                </Grid>

                <!--Animaciones-->

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Background" Value="{StaticResource ResourceKey=AzulOscuro}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                        <Setter Property="Foreground" Value="#888888"/>
                        <!--<Setter TargetName="Arrow" Property="Fill" Value="#888888" />-->
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- COMBOBOX - COMBOBOX INTERIOR -->
            <Style x:Key="ComboBox_Type_JN21" TargetType="{x:Type ComboBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="MinWidth" Value="80"/>
                <Setter Property="MinHeight" Value="20"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid>
                                <ToggleButton 
                                x:Name="ToggleButton" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Template="{StaticResource ComboBoxToggleButton_JN}" 
                                Grid.Column="2" 
                                Focusable="false"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press"/>
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="6,3,23,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                                <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}" 
                                Template="{StaticResource ComboBoxTextBox}" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Center" 
                                Margin="3,3,23,3"
                                Focusable="True" 
                                Background="White"
                                Foreground="Black"
                                Visibility="Hidden"
                                HorizontalContentAlignment="Center"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                                <Popup
                                x:Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                                    <Grid x:Name="DropDown"
                                        SnapsToDevicePixels="True"             
                                        MinWidth="{TemplateBinding ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border 
                                            x:Name="DropDownBorder"
                                            Background="White"
                                            BorderThickness="1"
                                            CornerRadius="1"
                                            BorderBrush="{TemplateBinding BorderBrush}"/>
                                        <ScrollViewer Margin="6,6,4,6" SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <!-- Animaciones  -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="Gray"/>
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEditable"  Value="true">
                                    <Setter Property="IsTabStop" Value="false"/>
                                    <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- COMBOBOX - COMBOBOX MATERIAL -->
            <Style x:Key="CmboboMD" TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Foreground" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}}"/>
                <Setter Property="Template" Value="{DynamicResource ComboBoxControlTemplate_MD}"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ComboBoxItem}">
                            <Setter Property="Tag" Value="1.0"/>
                            <Style.BasedOn>
                                <Style TargetType="{x:Type ComboBoxItem}">
                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                    <Setter Property="Padding" Value="8,5"/>
                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                                <Grid x:Name="GridWrapper">
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" Storyboard="{x:Null}" To="Normal">
                                                                    <VisualTransition.GeneratedEasingFunction>
                                                                        <CircleEase EasingMode="EaseOut"/>
                                                                    </VisualTransition.GeneratedEasingFunction>
                                                                </VisualTransition>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Normal"/>
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="SelectionStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Selected">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0" To="0.18" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBorder"/>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unselected"/>
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="FocusStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="Unfocused"/>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Focused">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unfocused"/>
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                    <Border x:Name="BackBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                                                    <Border x:Name="MouseOverBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" SnapsToDevicePixels="True" Background="{StaticResource PrimaryHueMidBrush}">
                                                        <!--<Border.Background>
                                                            <TemplateBinding Property="Foreground">
                                                                <TemplateBinding.Converter>
                                                                    <converters1:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                </TemplateBinding.Converter>
                                                            </TemplateBinding>
                                                        </Border.Background>-->
                                                    </Border>
                                                    <Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5" Background="DarkCyan">
                                                        <!--<Border.Background>
                                                            <TemplateBinding Property="Foreground">
                                                                <TemplateBinding.Converter>
                                                                    <converters1:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                </TemplateBinding.Converter>
                                                            </TemplateBinding>
                                                        </Border.Background>-->
                                                    </Border>
                                                    <wpf1:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="Black">
                                                        <!--<wpf1:Ripple.Feedback>
                                                            <TemplateBinding Property="Foreground">
                                                                <TemplateBinding.Converter>
                                                                    <converters1:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                </TemplateBinding.Converter>
                                                            </TemplateBinding>
                                                        </wpf1:Ripple.Feedback>-->
                                                    </wpf1:Ripple>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" TargetName="GridWrapper" Value="0.56"/>
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="Tag" Value="1.0"/>
                                                            <Condition Property="IsSelected" Value="True"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Height" Value="0"/>
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Style.BasedOn>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="Padding" Value="0,6"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate/>
                    </Setter.Value>
                </Setter>
                <Setter Property="wpf1:TextFieldAssist.TextBoxViewMargin" Value="1,0"/>
                <!--<Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}"/>
                    </Setter.Value>
                </Setter>-->
                <Style.Triggers>
                    <Trigger Property="IsKeyboardFocused" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                    </Trigger>
                    <Trigger Property="IsEditable" Value="True">
                        <Setter Property="IsTabStop" Value="False"/>
                        <Setter Property="wpf1:ComboBoxAssist.ShowSelectedItem" Value="True"/>
                    </Trigger>
                    <Trigger Property="wpf1:ComboBoxAssist.ShowSelectedItem" Value="True">
                        <Setter Property="ItemContainerStyle">
                            <Setter.Value>
                                <Style TargetType="{x:Type ComboBoxItem}">
                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                    <Setter Property="Padding" Value="16,8"/>
                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                                <Grid x:Name="GridWrapper">
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" Storyboard="{x:Null}" To="Normal">
                                                                    <VisualTransition.GeneratedEasingFunction>
                                                                        <CircleEase EasingMode="EaseOut"/>
                                                                    </VisualTransition.GeneratedEasingFunction>
                                                                </VisualTransition>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Normal"/>
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="SelectionStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Selected">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0" To="0.18" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBorder"/>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unselected"/>
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="FocusStates">
                                                            <VisualStateGroup.Transitions>
                                                                <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="Unfocused"/>
                                                            </VisualStateGroup.Transitions>
                                                            <VisualState x:Name="Focused">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unfocused"/>
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                    <Border x:Name="BackBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                                                    <Border x:Name="MouseOverBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" SnapsToDevicePixels="True" Background="{StaticResource PrimaryHueMidBrush}">
                                                        <!--<Border.Background>
                                                            <TemplateBinding Property="Foreground">
                                                                <TemplateBinding.Converter>
                                                                    <converters1:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                </TemplateBinding.Converter>
                                                            </TemplateBinding>
                                                        </Border.Background>-->
                                                    </Border>
                                                    <Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5" Background="RosyBrown">
                                                        <!--<Border.Background>
                                                            <TemplateBinding Property="Foreground">
                                                                <TemplateBinding.Converter>
                                                                    <converters1:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                </TemplateBinding.Converter>
                                                            </TemplateBinding>
                                                        </Border.Background>-->
                                                    </Border>
                                                    <wpf1:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="Green">
                                                        <!--<wpf1:Ripple.Feedback>
                                                            <TemplateBinding Property="Foreground">
                                                                <TemplateBinding.Converter>
                                                                    <converters1:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                </TemplateBinding.Converter>
                                                            </TemplateBinding>
                                                        </wpf1:Ripple.Feedback>-->
                                                    </wpf1:Ripple>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" TargetName="GridWrapper" Value="0.56"/>
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="Tag" Value="1.0"/>
                                                            <Condition Property="IsSelected" Value="True"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Height" Value="0"/>
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- CMBOBOXITEM - ESTILO MD -->
            <ControlTemplate x:Key="ComboBoxControlTemplate_MD" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup"  AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                        <!--<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                            <Border x:Name="DropDownBorder" BorderBrush="{TemplateBinding BorderBrush}"  BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Themes:SystemDropShadowChrome>-->
                    </Popup>
                    <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="IsTabStop" Value="False"/>
                                <Setter Property="Focusable" Value="False"/>
                                <Setter Property="ClickMode" Value="Press"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" Background="White" BorderThickness="1" SnapsToDevicePixels="True">
                                                <!--<Border.Background>
                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                        <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                                        <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>-->
                                                <Border x:Name="splitBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding BorderBrush}" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                    <Path Fill="White" x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                                </Border>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="red"/>
                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="White"/>
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                    <Setter Property="Background" TargetName="splitBorder" Value="#FFF0F0F0"/>
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="White"/>
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                    <Setter Property="Background" TargetName="splitBorder" Value="#FFF0F0F0"/>
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                </MultiDataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="Left" Margin="10,0,0,0" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                </Grid>
                <!--<ControlTemplate.Triggers>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                        <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                    </Trigger>
                    <Trigger Property="HasItems" Value="False">
                        <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="True"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                    </MultiTrigger>
                    <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>-->
            </ControlTemplate>

            <!-- TOOGLEBUTTON - TIPO MONEDA -->
            <Style x:Key="ToggleButtonStyle_TipoMoneda" TargetType="{x:Type ToggleButton}">
                <!--<Style.Resources>
                    <ResourceDictionary>
                        <Style TargetType="wpf1:PackIcon" BasedOn="{StaticResource {x:Type wpf1:PackIcon}}">
                            <Setter Property="Width" Value="20" />
                            <Setter Property="Height" Value="20" />
                        </Style>  Effect="{DynamicResource MaterialDesignShadowDepth2}"
                    </ResourceDictionary>
                </Style.Resources>-->
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="Width" Value="30"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="1"/>
                <!--<Setter Property="wpf1:ToggleButtonAssist.OnContent" Value="{StaticResource Icon_CHECK}" />-->
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}" >
                            <Grid ClipToBounds="True" >
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal"/>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" To="Checked">
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" To="Unchecked">
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                                    <Grid.Clip>
                                        <EllipseGeometry  RadiusX="{Binding Width, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 RadiusY="{Binding Height, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <EllipseGeometry.Center>
                                                <MultiBinding Converter="{StaticResource PointValueConverter}">
                                                    <Binding  RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                </MultiBinding>
                                            </EllipseGeometry.Center>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                                    </Grid.RenderTransform>
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              FlowDirection="LeftToRight"/>
                                </Grid>
                                <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5"  Background="{DynamicResource PrimaryHueMidBrush}">
                                    <Grid.Clip>
                                        <EllipseGeometry  RadiusX="{Binding Width, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 RadiusY="{Binding Height, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <EllipseGeometry.Center>
                                                <MultiBinding Converter="{StaticResource PointValueConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                </MultiBinding>
                                            </EllipseGeometry.Center>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                                    </Grid.RenderTransform>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight" Content="{StaticResource Icon_CHECK}" ContentTemplate="{Binding (wpf1:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TOOGLEBUTTON - ROJO Y VERDE -->
            <Style x:Key="ToggleButtonStyle_YesNo" TargetType="{x:Type ToggleButton}">
                <!--<Style.Resources>
                    <ResourceDictionary>
                        <Style TargetType="wpf1:PackIcon" BasedOn="{StaticResource {x:Type wpf1:PackIcon}}">
                            <Setter Property="Width" Value="20" />
                            <Setter Property="Height" Value="20" />
                        </Style>
                    </ResourceDictionary>
                </Style.Resources>-->
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="{DynamicResource RojoBoton}"/>
                <Setter Property="Width" Value="30"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="1"/>
                <!--<Setter Property="wpf1:ToggleButtonAssist.OnContent" Value="{StaticResource Icon_CHECK}" />-->
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid ClipToBounds="True">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal"/>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" To="Checked">
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" To="Unchecked">
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                                    <Grid.Clip>
                                        <EllipseGeometry RadiusX="{Binding Width, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 RadiusY="{Binding Height, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <EllipseGeometry.Center>
                                                <MultiBinding Converter="{StaticResource PointValueConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                </MultiBinding>
                                            </EllipseGeometry.Center>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                                    </Grid.RenderTransform>
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight"  Content="{StaticResource Icon_OFFCHECK}"
                                                      />
                                </Grid>
                                <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" Background="{DynamicResource VerdeOscuro_WM}">
                                    <Grid.Clip>
                                        <EllipseGeometry RadiusX="{Binding Width, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 RadiusY="{Binding Height, ConverterParameter=2.0, Converter={StaticResource DivisionMathConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <EllipseGeometry.Center>
                                                <MultiBinding Converter="{StaticResource PointValueConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                </MultiBinding>
                                            </EllipseGeometry.Center>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                                    </Grid.RenderTransform>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight" Content="{StaticResource Icon_CHECK}" ContentTemplate="{Binding (wpf1:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TOOGLEBUTTON - TIPO MENU -->
            <Style x:Key="ToogleButtonStyle_MENU" TargetType="{x:Type ToggleButton}">
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="{StaticResource PrimaryHueMidBrush}" />
                <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Width" Value="37" />
                <Setter Property="Height" Value="37" />
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="{TemplateBinding Property=Background}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal"/>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="45"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.581"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="4.875"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1.875"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-45"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2">

                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.581"/>

                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2">

                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="4.832"/>

                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2">

                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-2.082"/>

                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1">

                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.889"/>

                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1">

                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-1"/>

                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-180"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="45" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="0.581" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="4.875" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="1.875" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="-45" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="0.581" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="4.832" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="-2.082" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="0.889" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1" />
                                                <DoubleAnimation Duration="0" To="-1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1" />
                                                <DoubleAnimation Duration="0" To="-180" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2" />
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1" />
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Viewbox>
                                    <Canvas x:Name="canvas" Width="24" Height="24" RenderTransformOrigin="0.5,0.5">
                                        <Canvas.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Canvas.RenderTransform>
                                        <Rectangle x:Name="rectangle" Fill="{TemplateBinding Foreground}" Height="2" Canvas.Left="3" RadiusY="0" RadiusX="0" Canvas.Top="6" Width="18" RenderTransformOrigin="0.5,0.5">
                                            <Rectangle.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                        <Rectangle x:Name="rectangle1" Fill="{TemplateBinding Foreground}" Height="2" Canvas.Left="3" RadiusY="0" RadiusX="0" Canvas.Top="11" Width="18" RenderTransformOrigin="0.5,0.5">
                                            <Rectangle.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                        <Rectangle x:Name="rectangle2" Fill="{TemplateBinding Foreground}" Height="2" Canvas.Left="3" RadiusY="0" RadiusX="0" Canvas.Top="16" Width="18" RenderTransformOrigin="0.5,0.5">
                                            <Rectangle.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                    </Canvas>
                                </Viewbox>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Button.IsDefaulted" Value="true"/>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TOOGLEBUTTON - TIPO CHECKBOX -->
            <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="0,1,0,0"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ControlTemplate.Resources>
                                <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                                <Storyboard x:Key="HideRipple">
                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                                <Storyboard x:Key="ShowRipple">
                                    <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Viewbox Width="34">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="23.5"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="23.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Rectangle x:Name="Track" Fill="Black" HorizontalAlignment="Left" Height="15" Margin="4.211,5,4.211,0" Opacity="0.26" RadiusY="7.5" RadiusX="7.5" Stroke="{x:Null}" VerticalAlignment="Top" Width="40"/>
                                    <Grid x:Name="ThumbHolder" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="0" Y="0"/>
                                        </Grid.RenderTransform>
                                        <Ellipse x:Name="RippleThumb" Fill="White" HorizontalAlignment="Center" Height="25" IsHitTestVisible="False" Margin="0" Opacity="0.26" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Width="25">
                                            <Ellipse.RenderTransform>
                                                <ScaleTransform ScaleY="1" ScaleX="1"/>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                        <AdornerDecorator>
                                            <Ellipse x:Name="Thumb" Fill="#FFFAFAFA" HorizontalAlignment="Center" Height="25" Margin="0" RenderTransformOrigin="0.5,0.5" Stroke="{x:Null}" VerticalAlignment="Center" Width="25"/>
                                        </AdornerDecorator>
                                        <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" FlowDirection="LeftToRight" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Fill" TargetName="Thumb" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                    <Setter Property="Fill" TargetName="Track" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter Property="Opacity" TargetName="Track" Value=".2"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True"/>
                                        <Condition Property="wpf1:ToggleButtonAssist.HasOnContent" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Content" TargetName="ContentPresenter" Value="{Binding (wpf1:ToggleButtonAssist.OnContent), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="ContentTemplate" TargetName="ContentPresenter" Value="{Binding (wpf1:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="Button.IsDefaulted" Value="True"/>
                                <Trigger Property="IsMouseOver" Value="True"/>
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Thumb" Value="#FFBDBDBD"/>
                                    <Setter Property="Fill" TargetName="Track">
                                        <Setter.Value>
                                            <SolidColorBrush Color="Black" Opacity="0.12"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TOOGLEBUTTON - TIPO CHECKBOX CON ICON-->
            <Style x:Key="ToggleButtonStyle_ConIcon" TargetType="{x:Type ToggleButton}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="0,1,0,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ControlTemplate.Resources>
                                <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                                <Storyboard x:Key="HideRipple">
                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                                <Storyboard x:Key="ShowRipple">
                                    <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Viewbox Width="34">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="23.5"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="23.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Rectangle x:Name="Track" Fill="Black" HorizontalAlignment="Left" Height="15" Margin="4.211,5,4.211,0" Opacity="0.26" RadiusY="7.5" RadiusX="7.5" Stroke="{x:Null}" VerticalAlignment="Top" Width="40"/>
                                    <Grid x:Name="ThumbHolder" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="0" Y="0"/>
                                        </Grid.RenderTransform>
                                        <Ellipse x:Name="RippleThumb" Fill="{DynamicResource PrimaryHueLightBrush}" HorizontalAlignment="Center" Height="25" IsHitTestVisible="False" Margin="0" Opacity="0.26" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Width="25">
                                            <Ellipse.RenderTransform>
                                                <ScaleTransform ScaleY="1" ScaleX="1"/>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                        <AdornerDecorator >
                                            <Ellipse x:Name="Thumb" Fill="#FFFAFAFA" HorizontalAlignment="Center" Height="25" Margin="0" RenderTransformOrigin="0.5,0.5" Stroke="{x:Null}" VerticalAlignment="Center" Width="25"/>
                                        </AdornerDecorator>
                                        <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" FlowDirection="LeftToRight" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <!-- checked -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Fill" TargetName="Thumb" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Fill" TargetName="Track" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True"/>
                                        <Condition Property="wpf1:ToggleButtonAssist.HasOnContent" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Content" TargetName="ContentPresenter" Value="{Binding (wpf1:ToggleButtonAssist.OnContent), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="ContentTemplate" TargetName="ContentPresenter" Value="{Binding (wpf1:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiTrigger>
                                <!-- unchecked -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                </Trigger>
                                <Trigger Property="Button.IsDefaulted" Value="True"/>
                                <!-- mouseover -->
                                <Trigger Property="IsMouseOver" Value="True"/>
                                <!-- ispressed -->
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <!-- isenabled -->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Thumb" Value="#FFBDBDBD"/>
                                    <Setter Property="Fill" TargetName="Track">
                                        <Setter.Value>
                                            <SolidColorBrush Color="Black" Opacity="0.12"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TOOGLEBUTTON - TIPO RELLENO -->
            <Style x:Key="ToggleButtonStyle_Fill2" TargetType="{x:Type ToggleButton}">
                <!--<Setter Property="Name" Value="tgiFill2"/>-->
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Style.BasedOn>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="Foreground" Value="Red"/>
                        <Setter Property="Width" Value="40"/>
                        <Setter Property="Height" Value="40"/>
                        <Setter Property="FontSize" Value="18"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid ClipToBounds="True" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal"/>
                                                <VisualState x:Name="Disabled">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)"/>
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>
                                            <VisualStateGroup x:Name="CheckStates">
                                                <VisualStateGroup.Transitions>
                                                    <VisualTransition From="*" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                        <Storyboard>
                                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                                <LinearDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                                <LinearDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualTransition>
                                                    <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                        <Storyboard>
                                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                                <LinearDoubleKeyFrame KeyTime="0" Value="1"/>
                                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                                <LinearDoubleKeyFrame KeyTime="0" Value="1"/>
                                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualTransition>
                                                </VisualStateGroup.Transitions>
                                                <VisualState x:Name="Checked">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale"/>
                                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale"/>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Unchecked">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale"/>
                                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale"/>
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Ellipse x:Name="HoverEllipse" Fill="{TemplateBinding BorderBrush}" Stroke="{TemplateBinding Background}" Opacity=".8" StrokeThickness="1"/>
                                        <Ellipse x:Name="CheckedEllipse" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">
                                            <Ellipse.RenderTransform>
                                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Stroke" TargetName="HoverEllipse" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Setter Property="Opacity" TargetName="HoverEllipse" Value="1"/>
                                            <!--<Setter Property="Foreground" TargetName="contentPresenter" Value="Red"/>-->
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.BasedOn>
            </Style>

            <!-- TOOGLEBUTTON - TIPO CHECKBOX CON IMAGEN DE PIN-->
            <Style x:Key="ToggleButtonStyle_Check_PIN" TargetType="{x:Type ToggleButton}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="0,1,0,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ControlTemplate.Resources>
                                <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                                <Storyboard x:Key="HideRipple">
                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                                <Storyboard x:Key="ShowRipple">
                                    <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Viewbox Width="34">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="23.5"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="23.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Rectangle x:Name="Track" Fill="Black" HorizontalAlignment="Left" Height="15" Margin="4.211,5,4.211,0" Opacity="0.26" RadiusY="7.5" RadiusX="7.5" Stroke="{x:Null}" VerticalAlignment="Top" Width="40"/>
                                    <Grid x:Name="ThumbHolder" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="0" Y="0"/>
                                        </Grid.RenderTransform>
                                        <Ellipse x:Name="RippleThumb" Fill="{DynamicResource PrimaryHueLightBrush}" HorizontalAlignment="Center" Height="25" IsHitTestVisible="False" Margin="0" Opacity="0.26" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Width="25">
                                            <Ellipse.RenderTransform>
                                                <ScaleTransform ScaleY="1" ScaleX="1"/>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                        <AdornerDecorator>
                                            <Grid>
                                                <Ellipse x:Name="Thumb" Fill="#FFFAFAFA" HorizontalAlignment="Center" Height="25" Margin="0" RenderTransformOrigin="0.5,0.5" Stroke="{x:Null}" VerticalAlignment="Center" Width="25"/>
                                                <wpf1:PackIcon x:Name="pckiPIN" Kind="Pin" Margin="2.848,4.273,0,0">
                                                    <!--<wpf1:PackIcon.RenderTransform 4.51,4.866,0,0>
                                                        <TransformGroup>
                                                            <ScaleTransform/>
                                                            <SkewTransform/>
                                                            <RotateTransform x:Name="pckiAngulo" Angle="-45"/>
                                                            <TranslateTransform/>
                                                        </TransformGroup>
                                                    </wpf1:PackIcon.RenderTransform>-->
                                                </wpf1:PackIcon>
                                            </Grid>
                                        </AdornerDecorator>
                                        <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" FlowDirection="LeftToRight" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <!-- checked -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Fill" TargetName="Thumb" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Fill" TargetName="Track" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                    <Setter Property="Foreground" TargetName="pckiPIN" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                    <Setter Property="Margin" Value="3.026,4.095,0,0"/>
                                    <Setter Property="LayoutTransform" TargetName="pckiPIN">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <RotateTransform Angle="0"/>
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True"/>
                                        <Condition Property="wpf1:ToggleButtonAssist.HasOnContent" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Content" TargetName="ContentPresenter" Value="{Binding (wpf1:ToggleButtonAssist.OnContent), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="ContentTemplate" TargetName="ContentPresenter" Value="{Binding (wpf1:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiTrigger>
                                <!-- unchecked -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter Property="Margin" Value="0,1.781,0,0"/>
                                    <Setter Property="Foreground" TargetName="pckiPIN" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter Property="LayoutTransform" TargetName="pckiPIN">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <RotateTransform Angle="45"/>
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="Button.IsDefaulted" Value="True"/>
                                <!-- mouseover -->
                                <Trigger Property="IsMouseOver" Value="True"/>
                                <!-- ispressed -->
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <!-- isenabled -->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Thumb" Value="#FFBDBDBD"/>
                                    <Setter Property="Fill" TargetName="Track">
                                        <Setter.Value>
                                            <SolidColorBrush Color="Black" Opacity="0.12"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- NORMAL MD -->
            <Style x:Key="NORMAL MD" TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <!--<Setter Property="wpf1:TextFieldAssist.TextBoxViewMargin" Value="0 0 0 0" />  {x:Type TextBox}-->
                <!--<Setter Property="Background" Value="Transparent"/>
                <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="FontFamily" Value="Arial"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Bottom"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>-->
                <!--<Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>-->
                <!--<Setter Property="wpf1:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding (SpellCheck.IsEnabled), RelativeSource={RelativeSource Self}}" />-->
                <!-- cludge the default context menu  -->
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Header="_Cut" Command="Cut">
                                <MenuItem.Icon>
                                    <wpf1:PackIcon Kind="ContentCut"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="_Copy" Command="Copy">
                                <MenuItem.Icon>
                                    <wpf1:PackIcon Kind="ContentCopy" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="_Paste" Command="Paste">
                                <MenuItem.Icon>
                                    <wpf1:PackIcon Kind="ContentPaste"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="textFieldBoxBorder"
                            SnapsToDevicePixels="True">
                                <Grid>
                                    <Border x:Name="border"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="Transparent"
                                    
                                    SnapsToDevicePixels="True"
                                    Padding="0 4 0 4">
                                        <Grid x:Name="textFieldGrid"
                                      Margin="{TemplateBinding Padding}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                                  HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                  />
                                            -->
                <!-- HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}" -->
                <!--
                                            <wpf1:SmartHint x:Name="Hint"
                                                   Hint="{Binding (wpf1:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"
                                                   
                                                   FontSize="{TemplateBinding FontSize}"
                                                   Padding="{TemplateBinding Padding}"
                                                   HintOpacity="{Binding (wpf1:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                                   UseFloating="{Binding (wpf1:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                                   FloatingScale="{Binding (wpf1:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                                   FloatingOffset="{Binding (wpf1:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"                                               
                                                   />
                                        </Grid>
                                    </Border>
                                    <Line x:Name="DashedLine" VerticalAlignment="Bottom" Visibility="Hidden"
                                  StrokeThickness="1.25" StrokeDashArray="1,2.5" StrokeDashCap="Round"
                                  X1="0" X2="{Binding ActualWidth, ElementName=border}" Y1="0" Y2="0" 
                                  Stroke="{TemplateBinding BorderBrush}" Opacity="0.56" />
                                    <wpf1:Underline x:Name="Underline" Visibility="{Binding (wpf1:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="wpf1:HintAssist.IsFloating" Value="True" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                                </MultiTrigger>
                                <Trigger Property="wpf1:HintAssist.IsFloating" Value="True">
                                    <Setter TargetName="border" Property="Margin" Value="0 12 0 0" />
                                </Trigger>
                                <Trigger Property="wpf1:TextFieldAssist.HasTextFieldBox" Value="True">
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                                    <Setter TargetName="textFieldBoxBorder" Property="CornerRadius" Value="4" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                                    <Setter TargetName="textFieldGrid" Property="Margin" Value="16,0,16,0" />
                                    <Setter TargetName="border" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Underline" Property="CornerRadius" Value="0,0,4,4" />
                                    <Setter TargetName="Hint" Property="Margin" Value="0,0,0,16" />
                                    <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,8,0,8" />
                                </Trigger>
                                <Trigger Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="True">
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="textFieldBoxBorder" Property="CornerRadius" Value="4" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="1" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-1" />
                                    <Setter TargetName="textFieldGrid" Property="Margin" Value="16,0,16,0" />
                                    <Setter TargetName="border" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="Hint" Property="Margin" Value="0,0,0,16" />
                                    <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,8,0,8" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="false" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxDisabledBackground}" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="false" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="border" Value="0.42"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="false" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="False" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextFieldBox" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="DashedLine" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                                </Trigger>
                                <Trigger Property="Validation.HasError" Value="true">
                                    <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                                    <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Validation.HasError" Value="True" />
                                        <Condition Property="wpf1:TextFieldAssist.HasTextAreaBox" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                            <Condition Property="IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                </Style.Triggers>-->
            </Style>

            <!-- TABCONTROLS -->
            <Style TargetType="{x:Type dragablz:TabablzControl}" BasedOn="{StaticResource MaterialDesignTabablzControlStyle}" />

            <!-- ESTILO DE DATAGRID -->
            <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="GridLinesVisibility" Value="Horizontal"/>
                <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource MaterialDesignSelection}"/>
            </Style>

            <!--ESTILO DE DATAGRID - CELDAS -->
            <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
                <!--Setter Property="TextBlock.FontSize" Value="13" /-->
                <!--<Setter Property="Padding" Value="{Binding (wpf1:DataGridAssist.CellPadding), RelativeSource={RelativeSource Self}}" />-->
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="0,0,1,1"/>
                <!--<Setter Property="Margin" Value="4"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="3"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="Selector.IsSelectionActive" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="LightGray"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="Selector.IsSelectionActive" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Foreground" Value="Black"/>
                        <Setter Property="FontWeight" Value="Medium"/>
                        <Setter Property="Background" Value="{DynamicResource VerdePistache}" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value=".56"/>
                    </Trigger>
                </Style.Triggers>
            </Style>



            <!--ESTILO DE DATAGRID - ENCABEZADOS DE COLUMNAS-->
            <Style x:Key="{x:Type DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <!--<Setter Property="VerticalAlignment" Value="Center"/>
                -->
                <!--<Setter Property="Background" Value="Red"/>-->
                <!--
                <Setter Property="HorizontalAlignment" Value="Center"/>-->
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="BorderBrush" Value="White" />
                <!--<Setter Property="HorizontalAlignment" Value="Center" />-->
                <Setter Property="BorderThickness" Value="0,0,2,0" />
                <Setter Property="TextBlock.FontWeight" Value="Medium" />
                <!--<Setter Property="TextBlock.HorizontalAlignment" Value="Center" />-->
                <!--<Setter Property="Padding" Value="{Binding (wpf1:DataGridAssist.ColumnHeaderPadding), RelativeSource={RelativeSource Self}}" />-->
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="GoToVisible">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="GoToHidden">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource PrimaryHueMidBrush}" Padding="5">
                                    <StackPanel Orientation="Horizontal" Background="Transparent">
                                        <wpf1:ListSortDirectionIndicator Width="0" Height="12" x:Name="SortDirectionIndicator" HorizontalAlignment="Center" ListSortDirection="{TemplateBinding SortDirection}"/>
                                        <ContentPresenter Margin="4" HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                                <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                                <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Ascending">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Descending">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource GoToVisible}" x:Name="GoToVisible" />
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                        <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ESTILO DE DATAGRID - ENCABEZADOS DE COLUMNAS-->
            <Style x:Key="DTGHConColor_Azul" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <!--<Setter Property="VerticalAlignment" Value="Center"/>
                -->
                <!--<Setter Property="Background" Value="Red"/>-->
                <!--
                <Setter Property="HorizontalAlignment" Value="Center"/>-->
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="BorderBrush" Value="White" />
                <!--<Setter Property="HorizontalAlignment" Value="Center" />-->
                <Setter Property="BorderThickness" Value="0,0,2,0" />
                <Setter Property="TextBlock.FontWeight" Value="Medium" />
                <!--<Setter Property="TextBlock.HorizontalAlignment" Value="Center" />-->
                <!--<Setter Property="Padding" Value="{Binding (wpf1:DataGridAssist.ColumnHeaderPadding), RelativeSource={RelativeSource Self}}" />-->
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="GoToVisible">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="GoToHidden">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource PrimaryHueMidBrush}" Padding="5">
                                    <StackPanel Orientation="Horizontal" Background="Transparent">
                                        <wpf1:ListSortDirectionIndicator Width="0" Height="12" x:Name="SortDirectionIndicator" HorizontalAlignment="Center" ListSortDirection="{TemplateBinding SortDirection}"/>
                                        <ContentPresenter Margin="4" HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                                <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                                <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Ascending">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Descending">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource GoToVisible}" x:Name="GoToVisible" />
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                        <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ESTILO DE DATAGRID - ENCABEZADOS DE COLUMNAS-->
            <Style x:Key="DTGHConColor_Verde" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <!--<Setter Property="VerticalAlignment" Value="Center"/>
                -->
                <!--<Setter Property="Background" Value="Red"/>-->
                <Setter Property="OpacityMask" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <!--
                <Setter Property="HorizontalAlignment" Value="Center"/>-->
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="BorderBrush" Value="{StaticResource VerdeOscuro_WM}" />
                <!--<Setter Property="HorizontalAlignment" Value="Center" />-->
                <Setter Property="BorderThickness" Value="0,0,2,0" />
                <Setter Property="TextBlock.FontWeight" Value="Medium" />
                <!--<Setter Property="TextBlock.HorizontalAlignment" Value="Center" />-->
                <!--<Setter Property="Padding" Value="{Binding (wpf1:DataGridAssist.ColumnHeaderPadding), RelativeSource={RelativeSource Self}}" />-->
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="GoToVisible">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="GoToHidden">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding BorderBrush}" Padding="5">
                                    <StackPanel Orientation="Horizontal" Background="Transparent">
                                        <wpf1:ListSortDirectionIndicator Width="0" Height="12" x:Name="SortDirectionIndicator" HorizontalAlignment="Center" ListSortDirection="{TemplateBinding SortDirection}"/>
                                        <ContentPresenter Margin="4" HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                                <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                                <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Ascending">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Descending">
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                </Trigger>
                                <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource GoToVisible}" x:Name="GoToVisible" />
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                        <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ESTILO DE DATAGRID - ENCABEZADOS DE RENGLONES -->
            <Style x:Key="{x:Type DataGridRowHeader}" TargetType="{x:Type DataGridRowHeader}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                            <Grid MinWidth="24">
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                    <StackPanel Orientation="Horizontal">
                                        <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                        <Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
                                    </StackPanel>
                                </Border>
                                <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource MaterialDesignGridRowHeaderGripper}" VerticalAlignment="Top"/>
                                <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource MaterialDesignGridRowHeaderGripper}" VerticalAlignment="Bottom"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ESTILO DE DATAGRID - RENGLON -->
            <Style x:Key="{x:Type DataGridRow}" TargetType="{x:Type DataGridRow}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                <Setter Property="ValidationErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Foreground="#d50000" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridRow}">
                            <Border x:Name="DGR_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <SelectiveScrollingGrid>
                                    <SelectiveScrollingGrid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </SelectiveScrollingGrid.ColumnDefinitions>
                                    <SelectiveScrollingGrid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </SelectiveScrollingGrid.RowDefinitions>
                                    <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}"/>
                                    <DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                </SelectiveScrollingGrid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
                    </Trigger>
                    <Trigger Property="IsNewItem" Value="True">
                        <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- CIRCULAR -->
            <Style x:Key="MaterialDesignCircularProgressBar4" TargetType="{x:Type ProgressBar}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <!--<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" x:Name="pgbBOrd" />-->
                <Setter Property="Width" Value="20" />
                <Setter Property="Height" Value="20" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="IsIndeterminateStoryboard" Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle" RepeatBehavior="Forever">
                                    <DoubleAnimation From="0" To="359" Duration="0:0:2" />
                                </Storyboard>
                                <Storyboard x:Key="IsFullyIndeterminateScaleStoryboard">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FullyIndeterminateGridScaleTransform"
                                                           Storyboard.TargetProperty="ScaleX"
                                                           RepeatBehavior="Forever">
                                        <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                                        <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                                        <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimation Storyboard.TargetName="RotateTransform"
                                             Storyboard.TargetProperty="Angle" 
                                             RepeatBehavior="Forever"
                                             From="00" To="359" Duration="0:0:1.25" />
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid x:Name="TemplateRoot" ClipToBounds="False">
                                <Grid x:Name="FullyIndeterminateGrid">
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform" ScaleX="0" />
                                    </Grid.RenderTransform>
                                </Grid>
                                <Grid x:Name="PathGrid" Margin="2" />
                                <Canvas>
                                    <Ellipse Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
                                    <Path x:Name="Path" Stroke="{TemplateBinding Foreground}" StrokeThickness="5" 
                                  Canvas.Top="2" Canvas.Left="2"
                                  RenderTransformOrigin="0, 0">
                                        <Path.Data>
                                            <PathGeometry>
                                                <PathFigure StartPoint="{Binding ActualWidth, Converter={StaticResource StartPointConverter}, ElementName=PathGrid, Mode=OneWay}">
                                                    <ArcSegment Size="{Binding ActualWidth, Converter={StaticResource ArcSizeConverter}, ElementName=PathGrid, Mode=OneWay}"
                                                        SweepDirection="Clockwise">
                                                        <ArcSegment.IsLargeArc>
                                                            <MultiBinding Converter="{StaticResource LargeArcConverter}">
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                                <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                            </MultiBinding>
                                                        </ArcSegment.IsLargeArc>
                                                        <ArcSegment.Point>
                                                            <MultiBinding Converter="{StaticResource ArcEndPointConverter}">
                                                                <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                                <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                            </MultiBinding>
                                                        </ArcSegment.Point>
                                                    </ArcSegment>
                                                </PathFigure>
                                            </PathGeometry>
                                        </Path.Data>
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform x:Name="RotateTransform"
                                                         CenterX="{Binding ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, ElementName=PathGrid, Mode=OneWay}" 
                                                         CenterY="{Binding ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, ElementName=PathGrid, Mode=OneWay}">
                                                    <RotateTransform.Angle>
                                                        <MultiBinding Converter="{StaticResource RotateTransformConverter}">
                                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                        </MultiBinding>
                                                    </RotateTransform.Angle>
                                                </RotateTransform>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Canvas>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsIndeterminate, RelativeSource={RelativeSource Self}}" Value="True" />
                                        <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
                                        <Condition Binding="{Binding Value, Converter={StaticResource NotZeroConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.EnterActions>
                                        <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                                        <BeginStoryboard Storyboard="{StaticResource IsIndeterminateStoryboard}"
                                                 x:Name="IsIndeterminateStoryboard"/>
                                    </MultiDataTrigger.EnterActions>
                                    <MultiDataTrigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                                    </MultiDataTrigger.ExitActions>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsIndeterminate" Value="True" />
                                        <Condition Property="Value" Value="0" />
                                        <Condition Property="IsVisible" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                                        <BeginStoryboard Storyboard="{StaticResource IsFullyIndeterminateScaleStoryboard}"
                                                 x:Name="IsFullyIndeterminateStoryboard"/>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- LISTA -->
            <Style TargetType="{x:Type ListView}">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="False"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>

            <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                    <Grid>
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                        <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                            <Condition Property="WindowState" Value="Normal"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- VENTAN CON TODOS LOS BOTONES ( CERRAR, MAXIMRESTA, MINI)-->
            <Style x:Key="WindowStyle_NUBOT_NoResize" TargetType="{x:Type Window}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Background" Value="WhiteSmoke"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="FontFamily" Value="Arial"/>
                <Setter Property="Tag" Value=""/>
                <Setter Property="Width" Value="510"/>
                <Setter Property="Height" Value="300"/>
                <Setter Property="ResizeMode" Value="CanResize"/>
                <!--<Setter Property="WindowState" Value="Normal"/>-->
                <!--<Setter Property="WindowStartupLocation" Value="CenterScreen"/>-->
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">
                            <Border x:Name="gridPrincipal" Margin="3" Loaded="Border_Loaded" Initialized="BorderPrincipal_Initialized">
                                <!-- ANIMACION -->
                                <Border.Triggers>
                                    <EventTrigger RoutedEvent="FrameworkElement.Loaded" >
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="gridPrincipal" From="0" To="1" Duration="0:0:0.2"/>
                                                <!--<DoubleAnimation Storyboard.TargetProperty="Width" Storyboard.TargetName="gridPrincipal" From="0" To="{TemplateBinding Width}" Duration="0:0:0.22"/>
                                                <DoubleAnimation Storyboard.TargetProperty="Height" Storyboard.TargetName="gridPrincipal" From="0" To="{TemplateBinding Height}" Duration="0:0:0.22"/>-->
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Border.Triggers>
                                <!-- SOMBRA --><!--
                                <Border.Effect>
                                    <DropShadowEffect Direction="0" ShadowDepth="0" Opacity="1" BlurRadius="8" Color="{StaticResource Principal}"/>
                                </Border.Effect>-->
                                <!--<Border CornerRadius="3" Margin="0" BorderBrush="{StaticResource PrimaryHueMidBrush}" BorderThickness="3" Opacity="1"/>-->
                                <!-- BORDE / ORILLA -->
                                <Grid>
                                    <Border CornerRadius="5" Margin="0" BorderBrush="{StaticResource PrimaryHueMidBrush}" BorderThickness="3" Opacity="1">
                                        <!-- SOMBRA -->
                                        <Border.Effect>
                                            <DropShadowEffect Direction="0" ShadowDepth="0" Opacity="1" Color="{StaticResource Principal}"/>
                                        </Border.Effect>
                                    </Border>
                                    <Border CornerRadius="5" Margin="2" BorderBrush="{StaticResource PrimaryHueDarkBrush}" BorderThickness="3">
                                        <!--<Border.Effect>
                                        <DropShadowEffect Direction="0" ShadowDepth="0" Opacity="1" BlurRadius="8" Color="{StaticResource Principal}"/>
                                    </Border.Effect>-->
                                    </Border>
                                    <!-- ENCABEZADOS -->
                                    <Grid x:Name="gridHeader" VerticalAlignment="Top" Height="31" Margin="5,5,5,0" MouseDown="gridHeader_MouseDown" Background="{StaticResource PrimaryHueDarkBrush}">
                                        <!-- TITULOS -->
                                        <Border Margin="5,1,4,4" Height="26" Width="26" HorizontalAlignment="Left" CornerRadius="20"  Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                            <Image Source="Resources/Imagenes/Nu4it/logoNU4IT_blanco.png" Margin="4"/>
                                        </Border>
                                        <Label x:Name="lblNu4it" Content="{TemplateBinding Tag}" Foreground="White" FontSize="11" VerticalContentAlignment="Center" Margin="32,0,0,0"/>
                                        <Label x:Name="lblNu4it2" Content="{TemplateBinding Title}" Foreground="White" FontSize="11" VerticalContentAlignment="Center" Margin="32,0,0,0"/>
                                        <!-- BOTONES -->
                                        <Grid HorizontalAlignment="Right" VerticalAlignment="Top">
                                            <DockPanel>
                                                <Border Margin="2" x:Name="btnMinimizar" ToolTip="Minimizar" Width="25" Height="25" MouseDown="btnMinimizar_MouseDown"  Background="{StaticResource PrimaryHueDarkBrush}" CornerRadius="30">
                                                    <wpf1:PackIcon Kind="WindowMinimize" Foreground="White" Width="Auto" Height="Auto"/>
                                                </Border>
                                                <!--<Border Margin="2" x:Name="btnMaximResta"  ToolTip="Maximizar" Width="25" Height="25" MouseDown="btnMaximResta_MouseDown" Background="{StaticResource PrimaryHueDarkBrush}" CornerRadius="30">
                                                    <wpf1:PackIcon Kind="WindowMaximize" Foreground="White" Width="Auto" Height="Auto"/>
                                                </Border>-->
                                                <Border Margin="2" x:Name="btnCerar" ToolTip="Cerrar" Width="25" Height="25" MouseDown="btnCerrar_MouseDown" Background="{StaticResource PrimaryHueDarkBrush}" CornerRadius="30">
                                                    <wpf1:PackIcon Kind="WindowClose" Foreground="White" Width="Auto" Height="Auto"/>
                                                </Border>
                                            </DockPanel>
                                        </Grid>
                                    </Grid>
                                    <!-- CONTENIDO -->
                                    <Grid Margin="3,34,3,3" Background="White" >
                                        <!-- GRID DE CONTENIDO -->
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                    </Grid>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <!--<Style.Triggers>
                        <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                            <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
                        </Trigger>
                    </Style.Triggers>-->
            </Style>

            <!-- USERCONTROL CON IMAGEN -->
            <Style x:Key="UserControlStyle_NUBOT_img" TargetType="{x:Type UserControl}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <!--<Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>-->
                <Setter Property="FontFamily" Value="Arial"/>
                <Setter Property="Tag" Value=""/>
                <!--<Setter Property="Width" Value="510"/>
                <Setter Property="Height" Value="300"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type UserControl}">
                            <Grid x:Name="gridPrincipal">
                                <!-- ANIMACION -->
                                <Grid.Triggers>
                                    <EventTrigger RoutedEvent="FrameworkElement.Loaded" >
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="gridPrincipal" From="0" To="1" Duration="0:0:0.2"/>
                                                <!--<DoubleAnimation Storyboard.TargetProperty="Width" Storyboard.TargetName="gridPrincipal" From="0" To="{TemplateBinding Width}" Duration="0:0:0.22"/>
                                                <DoubleAnimation Storyboard.TargetProperty="Height" Storyboard.TargetName="gridPrincipal" From="0" To="{TemplateBinding Height}" Duration="0:0:0.22"/>-->
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Grid.Triggers>
                                <!-- SOMBRA -->
                                <!--<Grid.Effect>
                                    <DropShadowEffect Direction="0" ShadowDepth="0" Opacity="1" BlurRadius="12" Color="{StaticResource Principal}"/>
                                </Grid.Effect>-->
                                <Border CornerRadius="5" Margin="0" BorderBrush="{StaticResource PrimaryHueMidBrush}" BorderThickness="3" Opacity="1"/>
                                <!-- BORDE / ORILLA -->
                                <Border CornerRadius="5" Margin="2" BorderBrush="{StaticResource PrimaryHueDarkBrush}" BorderThickness="3">
                                    <!--<Border.Effect>
                                        <DropShadowEffect Direction="0" ShadowDepth="0" Opacity="1" BlurRadius="8" Color="{StaticResource Principal}"/>
                                    </Border.Effect>-->
                                </Border>
                                <!-- ENCABEZADOS -->
                                <Grid x:Name="gridHeader" VerticalAlignment="Top" Height="31" Margin="5,5,5,0" MouseDown="gridHeader_MouseDown" Background="{StaticResource PrimaryHueDarkBrush}">
                                    <!-- TITULOS -->
                                    <Border Margin="5,1,4,4" HorizontalAlignment="Left" CornerRadius="20" Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                        <Image Source="Resources/Imagenes/Nu4it/logoNU4IT_blanco.png" Margin="3" />
                                    </Border>
                                    <Label x:Name="lblNu4it" Content="{TemplateBinding Tag}" Foreground="White" FontSize="11" VerticalContentAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
                                    <!-- BOTONES -->
                                    <Grid HorizontalAlignment="Right" VerticalAlignment="Top">
                                        <DockPanel>
                                            <Border Margin="2" x:Name="btnHerramientas" ToolTip="Opciones" Width="25" Height="25" MouseDown="btnHerramientas_MouseDown" Background="{StaticResource PrimaryHueDarkBrush}" CornerRadius="30">
                                                <wpf1:PackIcon Kind="DotsVertical" Foreground="White" Width="Auto" Height="Auto"/>
                                            </Border>
                                        </DockPanel>
                                    </Grid>
                                </Grid>
                                <!-- CONTENIDO -->
                                <Grid Margin="5,36,5,5">
                                    <Grid.Background>
                                        <ImageBrush ImageSource="Resources/Imagenes/Nu4it/FondoNurobotF.png"/>
                                    </Grid.Background>
                                    <!-- IMAGEN -->
                                    <Image VerticalAlignment="Bottom" HorizontalAlignment="Right" Source="Resources/Imagenes/Nu4it/nu4it logo relieve.png" Height="40" Margin="0,0,0,10"/>
                                    <!-- GRID DE CONTENIDO -->
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- CHECKBOX -->
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Click">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Viewbox FlowDirection="LeftToRight" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                    <Canvas Height="24" Width="24">
                                        <Path x:Name="Graphic" Data="M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3 M19,5L19,19 5,19 5,5 19,5z" Fill="{DynamicResource MaterialDesignCheckBoxOff}"/>
                                        <Ellipse x:Name="InteractionEllipse" Fill="{TemplateBinding Foreground}" Height="0" IsHitTestVisible="False" Canvas.Left="12" Opacity="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="12" Width="0">
                                            <Ellipse.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="ButtonBase.Click">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <Trigger Property="HasContent" Value="True">
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Padding" Value="4,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                    <Setter Property="Opacity" Value="0.26"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True"/>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Data" TargetName="Graphic" Value="M10,17L5,12 6.41,10.58 10,14.17 17.59,6.58 19,8 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z"/>
                                    <Setter Property="Fill" TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Data" TargetName="Graphic" Value="M10,17L5,12 6.41,10.58 10,14.17 17.59,6.58 19,8 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z"/>
                                    <Setter Property="Opacity" TargetName="Graphic" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource ValidationErrorBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ValidationErrorBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- RICHTEXTBOX -->
            <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
            <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
            <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBoxBase}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                            <Condition Property="IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
                <Setter Property="TextDecorations" Value="Underline"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="Red"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="true">
                        <Setter Property="Cursor" Value="Hand"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type RichTextBox}">
                <Style.Resources>
                    <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                        <Setter Property="OverridesDefaultStyle" Value="true"/>
                    </Style>
                    <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Foreground" Value="Blue"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Style.Resources>
                <Setter Property="MinWidth" Value="10"/>
                <Style.BasedOn>
                    <StaticResource ResourceKey="{x:Type TextBoxBase}"/>
                </Style.BasedOn>
            </Style>

            <!-- EXPANDER PARA CONTENIDOS -->
            <Style x:Key="ExpanderStyle_Contenido" TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="White"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="OpacityMask" Value="White"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="ExpansionStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Expanded">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Visible</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Collapsed">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Collapsed</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Expanded">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Collapsed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Hidden</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <DockPanel Background="{TemplateBinding Background}" Margin="0">
                                    <ToggleButton x:Name="HeaderSite" BorderThickness="0" Cursor="Hand" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" Focusable="False" FontSize="14" IsTabStop="False" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Opacity="1" Margin="-10">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Top"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="5">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="25" Width="25" Kind="MenuDown" Opacity="1" RenderTransformOrigin="0.5,0.5" >
                                                                                                    <!--ChevronDown-->
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <Border x:Name="ContentSite" CornerRadius="3" DockPanel.Dock="Bottom" Margin="0" Background="{TemplateBinding OpacityMask}">
                                        <StackPanel x:Name="ContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <StackPanel.Height>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualHeight"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Height>
                                            <StackPanel.Width>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualWidth"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Width>
                                            <ContentPresenter x:Name="PART_Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"/>
                                        </StackPanel>
                                    </Border>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-180"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Down">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
            <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
            <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
                <Setter Property="Padding" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderThickness" Value="2,1,2,2"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="ColumnDefinition0"/>
                                    <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                    <RowDefinition x:Name="RowDefinition1" Height="*"/>
                                </Grid.RowDefinitions>
                                <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                                    <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                    <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Left">
                                    <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                    <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                    <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Right">
                                    <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                    <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                                    <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                    <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
            <Style x:Key="GroupBoxStyle1" TargetType="{x:Type GroupBox}">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="13"/>
            </Style>

            <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}" x:Name="TBINomral">
                <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
                <Setter Property="Foreground" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="Margin" Value="0"/>
                <!--<Setter Property="FontWeight" Value="Medium"/>-->
                <!--<Setter Property="Padding" Value="6,2,6,2"/>-->
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <GroupBox Style="{StaticResource GroupBoxStyle1}">
                                <Grid x:Name="templateRoot" SnapsToDevicePixels="true" >
                                    <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" Margin="-6,-2,-6,-6">
                                        <Border x:Name="innerBorder" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="0" Background="{StaticResource TabItem.Selected.Background}" Opacity="0"/>
                                    </Border>
                                    <ContentPresenter x:Name="contentPresenter"  ContentSource="Header" Focusable="False" HorizontalAlignment="Center" Margin="5" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                </Grid>
                            </GroupBox>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="mainBorder" Value="Red"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="Red"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="mainBorder" Value="Lime"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="Lime"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="mainBorder" Value="Blue"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="Blue"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="Background" TargetName="mainBorder" Value="WhiteSmoke"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource PrimaryHueMidBrush}"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                    <Setter Property="Background" TargetName="mainBorder" Value="Purple"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="Purple"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                    <Setter Property="Background" TargetName="mainBorder" Value="Orange"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="Orange"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                    <Setter Property="Background" TargetName="mainBorder" Value="Pink"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="Pink"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                    <Setter Property="Background" TargetName="mainBorder" Value="WhiteSmoke"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="WhiteSmoke"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                    <Setter Property="Foreground" Value="Black"/>

                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                    <Setter Property="Margin" Value="-2,-2,0,-2"/>
                                    <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>

                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>

                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                    <Setter Property="Margin" Value="-2,0,-2,-2"/>
                                    <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                    <Setter Property="Margin" Value="0,-2,-2,-2"/>
                                    <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                    <Setter Property="Margin" Value="-2,-2,-2,-1"/>
                                    <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                    <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,1"/>
                                    <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,1"/>
                                    <Setter Property="Background" TargetName="innerBorder" Value="{StaticResource PrimaryHueMidBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="innerBorder" Value="{StaticResource PrimaryHueMidBrush}"/>
                                    <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource PrimaryHueMidBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource PrimaryHueMidBrush}"/>
                                    <Setter Property="Foreground" Value="White"/>

                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
            <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
            <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
            <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
            <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
            <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
            <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
            <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
            <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
            <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
            <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="-90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="180"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="{StaticResource PrimaryHueMidBrush}" SnapsToDevicePixels="False" Margin="-1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="5"/>
                                        <ColumnDefinition Width="25"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Ellipse x:Name="circle" Grid.Column="1" Visibility="Hidden" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Grid.Column="1" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="White" StrokeThickness="2" VerticalAlignment="Center"/>
                                    <ContentPresenter Grid.Column="2" HorizontalAlignment="Center" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderThickness" Value="1.2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3 3 0 0" SnapsToDevicePixels="true">
                                <DockPanel >
                                    <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderStyle_Boton" TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="ExpandDirection" Value="Left"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="ExpansionStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Expanded">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Visible</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Collapsed">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Collapsed</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Expanded">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ContentSite">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Collapsed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Hidden</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ContentSite">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Collapsed</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <DockPanel Background="{TemplateBinding Background}">
                                    <ToggleButton x:Name="HeaderSite" BorderThickness="0" Cursor="Hand" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" DockPanel.Dock="Top" Foreground="Transparent" Focusable="False" FontSize="14" IsTabStop="False" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Opacity="1" Margin="0,0,-10,0">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Top"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}"  >
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="25" Width="25" Kind="MenuDown" Opacity="1" RenderTransformOrigin="0.5,0.5" >
                                                                                                    <!--ChevronDown-->
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <Border x:Name="ContentSite" CornerRadius="0 0 3 3" DockPanel.Dock="Bottom" Margin="0,5,-10,0" Background="{x:Null}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 1 0 0" >
                                        <StackPanel x:Name="ContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <StackPanel.Height>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualHeight"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Height>
                                            <StackPanel.Width>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualWidth"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Width>
                                            <Border BorderBrush="{StaticResource PrimaryHueDarkBrush}" Margin="-4,4,0,0" BorderThickness="2" CornerRadius="3" Background="White">
                                                <ContentPresenter x:Name="PART_Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"/>
                                            </Border>
                                        </StackPanel>
                                    </Border>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                                    <!--<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>-->
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-180"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Down">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DTPNormal" TargetType="{x:Type DatePicker}">
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="IsTodayHighlighted" Value="True"/>
                <Setter Property="SelectedDateFormat" Value="Short"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="Margin" Value="0"/>
            </Style>

            <Style x:Key="ExpanderStyle_MenuAbajo" TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="ExpandDirection" Value="Up"/>
                <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <!--<Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth1}"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="ExpansionStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Expanded">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Visible</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" To="Collapsed">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <Visibility>Collapsed</Visibility>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Expanded">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ContentSite">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Collapsed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content"/>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_Content">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Hidden</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ContentSite">
                                                    <DiscreteObjectKeyFrame KeyTime="0">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Collapsed</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <DockPanel Background="{TemplateBinding Background}">
                                    <ToggleButton x:Name="HeaderSite" BorderThickness="0" Cursor="Hand" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" DockPanel.Dock="Top" Foreground="Transparent" Focusable="False" FontSize="14" IsTabStop="False" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Opacity="1" Margin="0,0,-78,0">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Top"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}"  >
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="25" Width="25" Kind="MenuDown" Opacity="1" RenderTransformOrigin="0.5,0.5" >
                                                                                                    <!--ChevronDown-->
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <Border x:Name="ContentSite" CornerRadius="0 0 3 3" DockPanel.Dock="Bottom" Margin="
                                           36,0,0,-8" Background="{x:Null}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 1 0 0" >
                                        <StackPanel x:Name="ContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <StackPanel.Height>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualHeight"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Height>
                                            <StackPanel.Width>
                                                <MultiBinding UpdateSourceTrigger="Default">
                                                    <MultiBinding.Converter>
                                                        <converters1:MathMultipleConverter Operation="Multiply"/>
                                                    </MultiBinding.Converter>
                                                    <Binding ElementName="PART_Content" Path="ActualWidth"/>
                                                    <Binding ElementName="PART_Content" Path="Opacity"/>
                                                </MultiBinding>
                                            </StackPanel.Width>
                                            <Border BorderBrush="{StaticResource PrimaryHueDarkBrush}" Margin="-2" BorderThickness="2" CornerRadius="3" Background="White">
                                                <ContentPresenter x:Name="PART_Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"/>
                                            </Border>
                                        </StackPanel>
                                    </Border>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                                    <!--<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>-->
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                                    <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="12,24">
                                                                <Grid>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <ToggleButton Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="90"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="0,16,0,0" Grid.Row="1" VerticalAlignment="Top"/>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                                                        <ToggleButton.RenderTransform>
                                                                            <RotateTransform Angle="-180"/>
                                                                        </ToggleButton.RenderTransform>
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Down">
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                                    <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                                    <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                                    <Setter Property="Style" TargetName="HeaderSite">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="{TemplateBinding Background}" Padding="24,12">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,0,16,0" VerticalAlignment="Center"/>
                                                                    <ToggleButton Grid.Column="1" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                                        <ToggleButton.Style>
                                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                            <Border Background="Transparent">
                                                                                                <VisualStateManager.VisualStateGroups>
                                                                                                    <VisualStateGroup x:Name="CheckStates">
                                                                                                        <VisualStateGroup.Transitions>
                                                                                                            <VisualTransition From="Unchecked" GeneratedDuration="0" To="Checked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                            <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                                                                                                <VisualTransition.GeneratedEasingFunction>
                                                                                                                    <QuarticEase EasingMode="EaseOut"/>
                                                                                                                </VisualTransition.GeneratedEasingFunction>
                                                                                                                <Storyboard>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </VisualTransition>
                                                                                                        </VisualStateGroup.Transitions>
                                                                                                        <VisualState x:Name="Checked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                        <VisualState x:Name="Unchecked">
                                                                                                            <Storyboard>
                                                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                                            </Storyboard>
                                                                                                        </VisualState>
                                                                                                    </VisualStateGroup>
                                                                                                </VisualStateManager.VisualStateGroups>
                                                                                                <wpf1:PackIcon x:Name="ExpandPath" Foreground="{TemplateBinding Foreground}" Height="24" Kind="ChevronDown" Opacity="1" RenderTransformOrigin="0.5,0.5" Width="24">
                                                                                                    <wpf1:PackIcon.RenderTransform>
                                                                                                        <TransformGroup>
                                                                                                            <ScaleTransform/>
                                                                                                            <SkewTransform/>
                                                                                                            <RotateTransform/>
                                                                                                            <TranslateTransform/>
                                                                                                        </TransformGroup>
                                                                                                    </wpf1:PackIcon.RenderTransform>
                                                                                                </wpf1:PackIcon>
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ToggleButton.Style>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



        </ResourceDictionary>
    </Application.Resources>
</Application>
